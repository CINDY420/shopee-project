"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var chalk_1 = require("chalk");
var formatter_1 = require("json-schema-to-typescript/dist/src/formatter");
var json_schema_to_typescript_1 = require("json-schema-to-typescript");
var types_1 = require("./types");
var base_creator_1 = require("./core/base-creator");
var redux_1 = require("./redux");
var react_1 = require("./react");
var dto_1 = require("./dto");
var utils_1 = require("./utils");
var tools_1 = require("./core/tools");
var scanFile_1 = require("./core/scanFile");
var url = require("url");
var semver = require("semver");
var ora = require("ora");
var packageJson = require('../package.json');
function default_1(_a) {
    var type = _a.type, _b = _a.rapUrl, rapUrl = _b === void 0 ? 'http://rap.shopee.io' : _b, _c = _a.apiUrl, apiUrl = _c === void 0 ? 'http:/rap.shopee.io/api' : _c, _d = _a.rapperPath, rapperPath = _d === void 0 ? './src/rapper' : _d, _e = _a.urlMapper, urlMapper = _e === void 0 ? function (t) { return t; } : _e, codeStyle = _a.codeStyle, _f = _a.resSelector, resSelector = _f === void 0 ? 'type ResSelector<T> = T' : _f;
    return __awaiter(this, void 0, void 0, function () {
        var rapperVersion, spinner, newVersion, err_1, apiParams, projectId, oldFilesRapperVersion, changeFiles, confirmed, outputFiles, interfaces, e_1, scanResult, confirmed, Creator, indexCodeArr, indexStr, requestStr, extraStr, err_2;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0: return [4 /*yield*/, (0, utils_1.sendStatus)()];
                case 1:
                    _g.sent();
                    rapperVersion = packageJson.version;
                    console.log("current rapper version: ".concat(chalk_1["default"].grey(rapperVersion)));
                    spinner = ora(chalk_1["default"].grey('rapper: start to check version'));
                    spinner.start();
                    _g.label = 2;
                case 2:
                    _g.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, (0, utils_1.latestVersion)('@infra/rapper', rapperVersion.indexOf('beta') > -1)];
                case 3:
                    newVersion = _g.sent();
                    if (semver.lt(rapperVersion, newVersion)) {
                        spinner.warn(chalk_1["default"].yellow('rapper upgrade notice: '));
                        console.log("  current version: ".concat(chalk_1["default"].grey(rapperVersion)));
                        console.log("  latest version: ".concat(chalk_1["default"].cyan(newVersion)));
                        // console.log(
                        //   `  run ${chalk.green(`npm i -D ${packageJson.name}@latest && npm run rapper`)} can upgrade`,
                        // );
                    }
                    return [3 /*break*/, 5];
                case 4:
                    err_1 = _g.sent();
                    spinner.warn("rapper version check failed\uFF0C".concat(err_1.message));
                    return [3 /*break*/, 5];
                case 5:
                    /** Parameter verification */
                    spinner.start(chalk_1["default"].grey('rapper: start to check parameters'));
                    if (!type) {
                        return [2 /*return*/, new Promise(function () { return spinner.fail(chalk_1["default"].red('rapper: please config type parameter')); })];
                    }
                    else if (!['normal', 'redux', 'react', 'dto'].includes(type)) {
                        return [2 /*return*/, new Promise(function () {
                                return spinner.fail(chalk_1["default"].red('rapper: type parameter config errorï¼Œplease reconfigure'));
                            })];
                    }
                    spinner.succeed(chalk_1["default"].grey('rapper: parameters verified success'));
                    apiParams = url.parse(apiUrl, true).query;
                    projectId = parseInt(Array.isArray(apiParams.id) ? apiParams.id[0] : apiParams.id);
                    json_schema_to_typescript_1.DEFAULT_OPTIONS.style = __assign(__assign({}, json_schema_to_typescript_1.DEFAULT_OPTIONS.style), { singleQuote: true, semi: false, trailingComma: types_1.TRAILING_COMMA.ES5 });
                    if (codeStyle && typeof codeStyle === 'object') {
                        json_schema_to_typescript_1.DEFAULT_OPTIONS.style = __assign({}, codeStyle);
                    }
                    rapperPath = rapperPath.replace(/\/$/, '');
                    rapUrl = rapUrl.replace(/\/$/, '');
                    apiUrl = apiUrl.replace(/\/$/, '');
                    oldFilesRapperVersion = (0, scanFile_1.findRapperVersion)(rapperPath);
                    if (oldFilesRapperVersion && semver.lt(rapperVersion, oldFilesRapperVersion)) {
                        return [2 /*return*/, new Promise(function () {
                                spinner.fail(chalk_1["default"].red('rapper exec failed: current environment rapper version is lower than the version of the template file that has been generated. In order to avoid the lower version from overwriting the higher version, please upgrade'));
                                console.log("  current version: ".concat(chalk_1["default"].grey(rapperVersion)));
                                console.log("  current template file version: ".concat(chalk_1["default"].cyan(oldFilesRapperVersion)));
                            })];
                    }
                    /** Scan to find out whether the generated template file has been manually modified */
                    spinner.start(chalk_1["default"].grey('rapper: check whether the template code has been modified'));
                    changeFiles = (0, scanFile_1.findChangeFiles)(rapperPath);
                    if (!changeFiles.length) return [3 /*break*/, 7];
                    spinner.warn(chalk_1["default"].yellow('rapper: detect the following template code has been modified'));
                    changeFiles.forEach(function (str) {
                        console.log(chalk_1["default"].yellow("    ".concat(str)));
                    });
                    return [4 /*yield*/, (0, utils_1.templateFilesOverwriteConfirm)()];
                case 6:
                    confirmed = (_g.sent()).confirmed;
                    if (!confirmed) {
                        console.log(chalk_1["default"].red('Update operation has been terminated'));
                        process.exit(0);
                        return [2 /*return*/];
                    }
                    return [3 /*break*/, 8];
                case 7:
                    spinner.succeed(chalk_1["default"].grey('rapper: the template code has not been modified'));
                    _g.label = 8;
                case 8:
                    outputFiles = [];
                    interfaces = [];
                    spinner.start(chalk_1["default"].grey('rapper: getting interface information from Rap platform...'));
                    _g.label = 9;
                case 9:
                    _g.trys.push([9, 11, , 12]);
                    return [4 /*yield*/, (0, tools_1.getInterfaces)(apiUrl)];
                case 10:
                    interfaces = _g.sent();
                    spinner.succeed(chalk_1["default"].grey('rapper: get interface information succeeded'));
                    return [3 /*break*/, 12];
                case 11:
                    e_1 = _g.sent();
                    return [2 /*return*/, new Promise(function () {
                            return spinner.fail(chalk_1["default"].red("rapper: get interface information failed\uFF0C".concat(e_1)));
                        })];
                case 12:
                    interfaces = (0, tools_1.uniqueItfs)((0, tools_1.getIntfWithModelName)(rapUrl, interfaces, urlMapper));
                    /** Rap interface reference scanning, if the projectId is changed, it will not be scanned again, avoiding too many error messages to be displayed in the Terminal */
                    spinner.start(chalk_1["default"].grey('rapper: Scanning for interface dependencies'));
                    if (!((0, utils_1.getOldProjectId)(rapperPath) === String(projectId))) return [3 /*break*/, 16];
                    scanResult = (0, scanFile_1.findDeleteFiles)(interfaces, [rapperPath]);
                    if (!(scanResult.length && scanResult.length < 5)) return [3 /*break*/, 14];
                    spinner.warn(chalk_1["default"].yellow('rapper: The following files use interfaces that have been deleted or modified by Rap'));
                    scanResult.forEach(function (_a) {
                        var key = _a.key, filePath = _a.filePath, start = _a.start, line = _a.line;
                        console.log(chalk_1["default"].yellow("    Interface: ".concat(key, ", located: ").concat(filePath, ":").concat(line, ":").concat(start)));
                    });
                    return [4 /*yield*/, (0, utils_1.templateFilesRelyConfirm)()];
                case 13:
                    confirmed = (_g.sent()).confirmed;
                    if (!confirmed) {
                        console.log(chalk_1["default"].red('Update operation has been terminated'));
                        process.exit(0);
                        return [2 /*return*/];
                    }
                    return [3 /*break*/, 15];
                case 14:
                    spinner.succeed(chalk_1["default"].grey('rapper: no illegal dependencies found'));
                    _g.label = 15;
                case 15: return [3 /*break*/, 17];
                case 16:
                    spinner.succeed(chalk_1["default"].grey('rapper: no illegal dependencies found'));
                    _g.label = 17;
                case 17:
                    spinner.start(chalk_1["default"].grey('rapper: template code is being generated...'));
                    Creator = {};
                    switch (type) {
                        case 'react':
                            Creator = react_1["default"];
                            break;
                        case 'redux':
                            Creator = redux_1["default"];
                            break;
                        default:
                            Creator = {};
                    }
                    _g.label = 18;
                case 18:
                    _g.trys.push([18, 25, , 26]);
                    if (!(type === 'dto')) return [3 /*break*/, 19];
                    (0, dto_1["default"])({ interfaces: interfaces, outputFiles: outputFiles, format: formatter_1.format, rapperPath: rapperPath, options: json_schema_to_typescript_1.DEFAULT_OPTIONS, rapUrl: rapUrl, projectId: projectId, rapperVersion: rapperVersion });
                    return [3 /*break*/, 24];
                case 19:
                    indexCodeArr = [(0, base_creator_1.createBaseIndexCode)()];
                    if (Creator.createIndexStr) {
                        indexCodeArr.push(Creator.createIndexStr());
                    }
                    indexStr = "\n        ".concat((0, tools_1.creatHeadHelpStr)(rapUrl, projectId, rapperVersion), "\n        ").concat((0, utils_1.mixGeneratedCode)(indexCodeArr), "\n      ");
                    outputFiles.push({
                        path: "".concat(rapperPath, "/index.ts"),
                        content: (0, formatter_1.format)(indexStr, json_schema_to_typescript_1.DEFAULT_OPTIONS)
                    });
                    requestStr = '';
                    if (!Creator.createBaseRequestStr) return [3 /*break*/, 21];
                    return [4 /*yield*/, Creator.createBaseRequestStr(interfaces, {
                            rapUrl: rapUrl,
                            resSelector: resSelector
                        })];
                case 20:
                    requestStr = _g.sent();
                    return [3 /*break*/, 23];
                case 21: return [4 /*yield*/, (0, base_creator_1.createBaseRequestStr)(interfaces, {
                        rapUrl: rapUrl,
                        resSelector: resSelector
                    })];
                case 22:
                    requestStr = _g.sent();
                    _g.label = 23;
                case 23:
                    requestStr = "\n        ".concat((0, tools_1.creatHeadHelpStr)(rapUrl, projectId, rapperVersion), "\n        ").concat(requestStr, "\n      ");
                    outputFiles.push({
                        path: "".concat(rapperPath, "/request.ts"),
                        content: (0, formatter_1.format)(requestStr, json_schema_to_typescript_1.DEFAULT_OPTIONS)
                    });
                    /** generate ${type}.ts dynamic */
                    Creator.createDynamicStr &&
                        outputFiles.push({
                            path: "".concat(rapperPath, "/").concat(type, ".ts"),
                            content: (0, formatter_1.format)("\n              ".concat((0, tools_1.creatHeadHelpStr)(rapUrl, projectId, rapperVersion), "\n              ").concat(Creator.createDynamicStr(interfaces, { rapUrl: rapUrl, resSelector: resSelector }), "\n            "), json_schema_to_typescript_1.DEFAULT_OPTIONS)
                        });
                    if (type !== 'redux') {
                        extraStr = "\n          ".concat((0, tools_1.creatHeadHelpStr)(rapUrl, projectId, rapperVersion), "\n          ").concat((0, base_creator_1.createExtraInfo)(interfaces), "\n        ");
                        outputFiles.push({
                            path: "".concat(rapperPath, "/extra.ts"),
                            content: (0, formatter_1.format)(extraStr, json_schema_to_typescript_1.DEFAULT_OPTIONS)
                        });
                    }
                    _g.label = 24;
                case 24:
                    /** MD5 is added to the first line of the generated template file */
                    outputFiles = outputFiles.map(function (item) { return (__assign(__assign({}, item), { content: "/* md5: ".concat((0, utils_1.getMd5)(item.content), " */\n").concat(item.content) })); });
                    return [3 /*break*/, 26];
                case 25:
                    err_2 = _g.sent();
                    spinner.fail(chalk_1["default"].red("rapper: fail\uFF01".concat(err_2.message)));
                    return [2 /*return*/];
                case 26: return [2 /*return*/, Promise.all(outputFiles.map(function (_a) {
                        var path = _a.path, content = _a.content;
                        return (0, utils_1.writeFile)(path, content);
                    }))
                        .then(function () {
                        spinner.succeed(chalk_1["default"].green("rapper: success\uFF01synced ".concat(interfaces.length, " interfaces")));
                    })["catch"](function (err) {
                        spinner.fail(chalk_1["default"].red("rapper: fail\uFF01".concat(err.message)));
                    })];
            }
        });
    });
}
exports["default"] = default_1;
