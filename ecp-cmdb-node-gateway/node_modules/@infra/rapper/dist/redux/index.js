"use strict";
exports.__esModule = true;
var reduxCreator_1 = require("./reduxCreator");
var requesterCreator_1 = require("./requesterCreator");
var utils_1 = require("../utils");
var packageName = (0, utils_1.getPackageName)();
/** generate index.ts */
function createIndexStr() {
    return {
        "import": "\n      import { useResponse, useAPI, useAllResponse, clearResponseCache, rapperActions, rapperBaseSelector, rapperDataSelector } from './redux'\n      import { IResponseTypes } from './request'\n      import * as reduxLib from '".concat(packageName, "/runtime/reduxLib'\n    "),
        body: "\n      const { rapperReducers, rapperEnhancer } = reduxLib\n    ",
        "export": "\n      export {\n        /** use Hooks to handle response data */\n        useResponse,\n        useAPI,\n        /** use response data (include cache) */\n        useAllResponse,\n        /** clear cache */\n        clearResponseCache,\n        rapperBaseSelector,\n        rapperDataSelector,\n        rapperActions,\n        rapperReducers,\n        rapperEnhancer,\n      };\n\n      /** response type */\n      export type ResponseTypes = IResponseTypes\n    "
    };
}
/** generate redux.ts */
function createDynamicStr(interfaces, extr) {
    return "\n    import { useSelector } from 'react-redux'\n    import { IModels, IResponseTypes } from './request'\n    import * as reduxLib from '".concat(packageName, "/runtime/reduxLib'\n    import { fetch } from './index'\n\n    ").concat((0, reduxCreator_1.createActionStr)(interfaces, extr), "\n    ").concat((0, reduxCreator_1.createUseRapStr)(interfaces, extr), "\n    ").concat((0, reduxCreator_1.createBaseSelectorStr)(interfaces), "\n    ").concat((0, reduxCreator_1.createDataSelectorStr)(interfaces), "\n\n    export const rapperActions = RequestTypes || []\n  ");
}
exports["default"] = { createIndexStr: createIndexStr, createDynamicStr: createDynamicStr, createBaseRequestStr: requesterCreator_1.createBaseRequestStr };
