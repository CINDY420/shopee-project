#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var index_1 = require("./index");
var path_1 = require("path");
var chalk_1 = require("chalk");
var program = require("commander");
// Todo: add checkUpdate
(function () {
    program
        .option('--type <typeName>', 'set type')
        .option('--apiUrl <apiUrl>', 'set Rap platform server url')
        .option('--rapUrl <rapUrl>', 'set Rap platform client url')
        .option('--rapperPath <rapperPath>', 'set generate code directory')
        .option('--resSelector <resSelector>', 'set response conversion data type');
    program.parse(process.argv);
    var rapperConfig;
    if (program.type && program.apiUrl && program.rapUrl) {
        /** from scripts config */
        rapperConfig = {
            type: program.type,
            apiUrl: program.apiUrl,
            rapUrl: program.rapUrl,
            rapperPath: (0, path_1.resolve)(process.cwd(), program.rapperPath || './src/models/rapper/')
        };
        if (program.resSelector) {
            rapperConfig = __assign(__assign({}, rapperConfig), { resSelector: program.resSelector });
        }
    }
    else {
        /** from package.json's rapper field configuration */
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        var packageConfig = require((0, path_1.resolve)(process.cwd(), './package.json'));
        if (!packageConfig.rapper) {
            console.log(chalk_1["default"].yellow('Rapper has not been configured in package.json, please refer to the configuration manual'));
            process.exit(1);
        }
        var _a = packageConfig.rapper, projectId = _a.projectId, type = _a.type, rapUrl = _a.rapUrl, apiUrl = _a.apiUrl, rapperPath = _a.rapperPath, resSelector = _a.resSelector;
        if (!projectId) {
            console.log(chalk_1["default"].yellow('Rapper.projectId has not been configured in package.json'));
            process.exit(1);
        }
        rapperConfig = {
            type: type || 'redux',
            apiUrl: "".concat(apiUrl, "/repository/get?id=").concat(projectId),
            rapUrl: rapUrl,
            rapperPath: (0, path_1.resolve)(process.cwd(), rapperPath || './src/models/rapper/')
        };
        if (resSelector) {
            rapperConfig = __assign(__assign({}, rapperConfig), { resSelector: resSelector });
        }
    }
    (0, index_1.rapper)(rapperConfig);
})();
