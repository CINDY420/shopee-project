"use strict";
exports.__esModule = true;
var tools_1 = require("../core/tools");
var tools_2 = require("./tools");
var _ = require("lodash");
function createInterfaceDto(method, url, properties) {
    var path = url.indexOf('/') > -1 ? url.substring(url.indexOf('/') + 1) : url;
    var request = properties.filter(function (p) { return p.scope === 'request'; });
    var response = properties.filter(function (p) { return p.scope === 'response'; });
    var itemsGroup = _.chain(properties).filter(function (item) { return item.parentId !== tools_2.ROOT_ID; }).groupBy(function (item) { return item.parentId; }).value();
    var items = (0, tools_2.traverseItem)(itemsGroup);
    var query = (0, tools_2.traverseQuery)(url).filter(function (p) { return !request.find(function (req) { return req.name === p.name; }); });
    if (path.indexOf('?') > -1) {
        path = path.substring(0, path.indexOf('?'));
    }
    var dtoName = _.upperFirst(method.toLowerCase()) + path.split('/').map(function (s) {
        return (/^(\:|\{).+/.test(s) ? '1' : '') + _.chain(s).camelCase().upperFirst().value();
    }).join('');
    var dep = {
        validator: new Set(),
        transform: new Set(),
        empty: false
    };
    var contentStr = "\n    export class ".concat(dtoName, "ReqDto {\n      ").concat((0, tools_2.createParams)(query, items, dep, tools_2.ROOT_ID), "\n      ").concat((0, tools_2.createParams)(request, items, dep, tools_2.ROOT_ID), "\n    }\n    export class ").concat(dtoName, "ResDto {\n      ").concat((0, tools_2.createParams)(response, items, dep, tools_2.ROOT_ID), "\n    }\n  ");
    var itemArr = Array.from(items);
    var itemStr = itemArr.sort(function (a, b) { return b[0] - a[0]; }).reduce(function (str, cur) {
        var k = cur[0], v = cur[1];
        if (String(k) === v.replace('Item', '')) {
            str += "\n      export class Item".concat(k, " {\n        ").concat((0, tools_2.createParams)(itemsGroup[k], items, dep), "\n      }\n\n      ");
        }
        return str;
    }, '');
    var validator = dep.validator, transform = dep.transform, empty = dep.empty;
    return {
        str: "\n    ".concat(validator.size > 0 ? "import { ".concat(Array.from(validator).join(','), " } from 'class-validator'") : '', "\n    ").concat(transform.size > 0 ? "import { ".concat(Array.from(transform).join(','), " } from 'class-transformer'") : '', "\n    ").concat(empty ? "import { ItemEmpty } from '.'" : '', "\n    ").concat(itemStr, "\n    ").concat(contentStr, "\n  "),
        req: "".concat(dtoName, "ReqDto"),
        res: "".concat(dtoName, "ResDto"),
        empty: empty
    };
}
/** generate ts */
function createDtoFiles(config) {
    var hasEmpty = false;
    var interfaces = config.interfaces, outputFiles = config.outputFiles, format = config.format, rapperPath = config.rapperPath, options = config.options, rapUrl = config.rapUrl, projectId = config.projectId, rapperVersion = config.rapperVersion;
    var headStr = (0, tools_1.creatHeadHelpStr)(rapUrl, projectId, rapperVersion);
    var entries = interfaces.map(function (itf) {
        var url = itf.url, method = itf.method, properties = itf.properties;
        var fileName = method.toLowerCase() + "".concat(url.startsWith('/') ? '' : '-') + url.replace(/\//g, '-');
        var _a = createInterfaceDto(method, url, properties), str = _a.str, req = _a.req, res = _a.res, empty = _a.empty;
        var interfaceStr = "\n      ".concat(headStr, "\n      ").concat((0, tools_1.creatInterfaceHelpStr)(rapUrl, itf), "\n      ").concat(str, "\n    ");
        outputFiles.push({
            path: "".concat(rapperPath, "/").concat(fileName, ".dto.ts"),
            content: format(interfaceStr, options)
        });
        if (empty)
            hasEmpty = empty;
        return { req: req, res: res, name: fileName };
    });
    var indexStr = "\n    ".concat(headStr, "\n    ").concat(hasEmpty ? "export class ".concat(tools_2.ITEM_EMPTY, " {}\n") : '', "\n    ").concat(entries.reduce(function (s, item) {
        var req = item.req, res = item.res, name = item.name;
        return s += "export {".concat(req, ", ").concat(res, "} from './").concat(name, ".dto'\n");
    }, ''));
    outputFiles.push({
        path: "".concat(rapperPath, "/index.ts"),
        content: format(indexStr, options)
    });
}
exports["default"] = createDtoFiles;
