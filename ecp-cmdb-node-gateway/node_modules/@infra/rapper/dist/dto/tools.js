"use strict";
exports.__esModule = true;
exports.createParams = exports.isNumber = exports.traverseQuery = exports.traverseItem = exports.compareProperties = exports.ROOT_ID = exports.ITEM_EMPTY = void 0;
/*
 * @Author: xia xian
 * @Date: 2022-04-24 15:18:49
 * @LastEditors: xia xian
 * @LastEditTime: 2022-05-25 19:07:51
 * @Description:
 */
var JSON5 = require("json5");
var convert_1 = require("../core/convert");
var _ = require("lodash");
var POS_QUERY = 2;
exports.ITEM_EMPTY = 'ItemEmpty';
exports.ROOT_ID = -1;
function getArrayType(value) {
    var TypeName = 'any';
    try {
        var arr = JSON5.parse(value);
        if (Array.isArray(arr) && arr.length > 0) {
            TypeName = typeof arr[0];
        }
    }
    catch (e) {
    }
    return TypeName;
}
function compareProperties(item, oldItem, group) {
    var len = item.length;
    if (len !== oldItem.length)
        return false;
    var i = 0;
    for (; i < len; i++) {
        var a = item[i];
        var b = oldItem[i];
        var type = a.type.toLowerCase();
        if (a.name !== b.name || a.type !== b.type)
            return false;
        if (['array', 'object'].includes(type)) {
            var aChildren = group[a.id];
            var bChildren = group[b.id];
            if (aChildren && !bChildren)
                return false;
            if (!aChildren && bChildren)
                return false;
            if (type === 'array' && !aChildren && !bChildren && getArrayType(a.value) !== getArrayType(b.value)) {
                return false;
            }
            if (aChildren && bChildren && !compareProperties(aChildren, bChildren, group))
                return false;
        }
    }
    if (i !== len)
        return false;
    return true;
}
exports.compareProperties = compareProperties;
function traverseItem(itemGroup) {
    var items = new Map();
    var _loop_1 = function (parentId) {
        var item = itemGroup[parentId];
        item.sort(function (a, b) { return a.name.localeCompare(b.name); });
        var name_1 = "Item".concat(parentId);
        items.forEach(function (v, k) {
            var oldItem = itemGroup[k];
            if (compareProperties(item, oldItem, itemGroup))
                name_1 = v;
        });
        items.set(parentId, name_1);
    };
    for (var parentId in itemGroup) {
        _loop_1(parentId);
    }
    return items;
}
exports.traverseItem = traverseItem;
function traverseQuery(url) {
    var params = url.indexOf('?') > -1 ? new URLSearchParams(url.substring(url.indexOf('?') + 1)) : [];
    var query = new Map();
    var queryList = [];
    var restParams = (0, convert_1.getRestfulPlaceHolders)(url);
    function addQuery(value, name) {
        if (!query.has(name)) {
            query.set(name, isNumber(value) ? 'number' : 'string');
        }
        else {
            query.set(name, isNumber(value) ? 'number[]' : 'string[]');
        }
    }
    restParams.forEach(function (name) { return addQuery('_', name); });
    params.forEach(function (value, name) {
        addQuery(value, name);
    });
    query.forEach(function (value, key) {
        queryList.push({
            name: key,
            type: value,
            required: true,
            parentId: exports.ROOT_ID,
            pos: POS_QUERY
        });
    });
    return queryList;
}
exports.traverseQuery = traverseQuery;
function isNumber(s) {
    return !Number.isNaN(_.toNumber(s));
}
exports.isNumber = isNumber;
function createParams(list, items, dep, parentId) {
    var filtered = parentId ? list.filter(function (item) { return item.parentId === parentId; }) : list;
    return filtered.reduce(function (str, props) {
        var required = props.required, name = props.name, value = props.value, id = props.id, description = props.description, pos = props.pos, scope = props.scope;
        var validator = dep.validator, transform = dep.transform;
        var type = props.type.toLowerCase().replace(/regexp|function/, 'string');
        var isArray = type === 'array' || type.endsWith('[]');
        var NestedName = items.get(String(id)) || exports.ITEM_EMPTY;
        var isNested = items.has(String(id));
        var TypeName = type.replace('[]', '');
        if (TypeName === 'array') {
            TypeName = getArrayType(value);
        }
        if (!isNested && type === 'object') {
            isNested = true;
            dep.empty = true;
        }
        if (isNested) {
            validator.add('ValidateNested');
        }
        if (isArray) {
            validator.add('IsArray');
        }
        if (required) {
            validator.add('IsNotEmpty');
        }
        else {
            validator.add('IsOptional');
        }
        if ((type === 'number' || isNested) && transform.size === 0) {
            transform.add('Type');
        }
        var prefixType = type.replace('[]', '');
        if (['number', 'string', 'boolean'].indexOf(prefixType) > -1) {
            validator.add("Is".concat(_.upperFirst(prefixType)));
        }
        var isRequired = required && type !== 'null';
        str += "\n            ".concat(description ? "/**\n    ".concat((0, convert_1.removeComment)(description), "\n  */") : '', "\n            ").concat(isRequired ? ' @IsNotEmpty()' : '@IsOptional()', "\n            ").concat(isNested ? '@ValidateNested()' : '', "\n            ").concat(isNested ? "@Type(() => ".concat(NestedName, ")") : '', "\n            ").concat(TypeName === 'number' && pos === POS_QUERY && scope !== 'response' ? "@Type(() => Number)" : '', "\n            ").concat(TypeName === 'number' ? "@IsNumber(".concat(isArray ? '{}, {each: true}' : '', ")") : '', "\n            ").concat(TypeName === 'string' ? "@IsString(".concat(isArray ? '{each: true}' : '', ")") : '', "\n            ").concat(TypeName === 'boolean' ? "@IsBoolean(".concat(isArray ? '{each: true}' : '', ")") : '', "\n            ").concat(isArray ? '@IsArray()' : '', "\n            '").concat(name, "'").concat(isRequired ? '' : '?', " : ").concat(isNested ? NestedName : TypeName).concat(isArray ? '[]' : '', "\n\n        ");
        return str;
    }, '');
}
exports.createParams = createParams;
