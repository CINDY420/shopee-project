"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.sendStatus = exports.latestVersion = exports.getPackageRegistry = exports.getPackageName = exports.templateFilesRelyConfirm = exports.templateFilesOverwriteConfirm = exports.getOldProjectId = exports.getMd5 = exports.isInRoot = exports.moveFile = exports.writeFile = exports.mixGeneratedCode = exports.relativeImport = exports.withoutExt = void 0;
var path = require("path");
var mkdirp = require("mkdirp");
var fs = require("fs");
var crypto = require("crypto");
var inquirer = require("inquirer");
var chalk_1 = require("chalk");
var axios_1 = require("axios");
var exec = require('child_process').exec;
var packageJson = require('../package.json');
var token = 'L9nNQZm95Pi9Y35bdskK';
var issueUrl = 'https://git.garena.com/api/v4/projects/50989/issues/3';
function withoutExt(p) {
    return p.replace(/\.[^/.]+$/, '');
}
exports.withoutExt = withoutExt;
function relativeImport(from, to) {
    return withoutExt('./' + path.relative(path.dirname(from), to));
}
exports.relativeImport = relativeImport;
function mixGeneratedCode(codeArr) {
    var imports = codeArr.map(function (c) { return c["import"]; });
    var bodies = codeArr.map(function (c) { return c.body; });
    var _exports = codeArr.map(function (c) { return c["export"]; });
    return "\n    ".concat(imports.join('\n'), "\n    ").concat(bodies.join('\n'), "\n    ").concat(_exports.join('\n'), "\n  ");
}
exports.mixGeneratedCode = mixGeneratedCode;
function writeFile(filepath, contents) {
    return new Promise(function (resolve, reject) {
        mkdirp(path.dirname(filepath), function (err) {
            if (err)
                return reject("filepath: ".concat(filepath, ", ").concat(err));
            fs.writeFile(filepath, contents, function (err) {
                if (err)
                    return reject("filepath: ".concat(filepath, ", ").concat(err));
                resolve();
            });
        });
    });
}
exports.writeFile = writeFile;
function moveFile(from, to) {
    return new Promise(function (resolve, reject) {
        mkdirp(path.dirname(to), function (err) {
            if (err)
                return reject("Read file failed: ".concat(from, ", ").concat(err));
            var contents = fs.readFileSync(from);
            fs.writeFile(to, contents, function (err) {
                if (err)
                    return reject("Write file failed: ".concat(to, ", ").concat(err));
                resolve();
            });
        });
    });
}
exports.moveFile = moveFile;
/**
 * Whether the command is executed in the root directory
 */
function isInRoot() {
    var cwd = process.cwd();
    var flag = fs.existsSync(path.resolve(cwd, 'package.json'));
    return flag;
}
exports.isInRoot = isInRoot;
/** Get file md5 */
function getMd5(fileContent) {
    var hash = crypto.createHash('md5');
    hash.update(fileContent);
    return hash.digest('hex');
}
exports.getMd5 = getMd5;
function getOldProjectId(rappperPath) {
    var indexPath = path.resolve(process.cwd(), rappperPath, './index.ts');
    try {
        var content = fs.readFileSync(indexPath, 'utf-8') || '';
        var projectIdStr = content.split('\n')[1] || '';
        var matchArr = projectIdStr.match(/\/\*\sRap repository id:\s(\S*)\s\*\//) || [];
        return matchArr[1];
    }
    catch (err) {
        return undefined;
    }
}
exports.getOldProjectId = getOldProjectId;
/** Template file coverage confirmation */
function templateFilesOverwriteConfirm() {
    return __awaiter(this, void 0, void 0, function () {
        var question, answers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    question = [
                        {
                            name: 'confirmed',
                            type: 'confirm',
                            message: chalk_1["default"].green('It is detected that you have modified the template code generated by rapper. The newly generated template code will overwrite your modifications. Make sure to be continueï¼Ÿ'),
                            "default": false
                        },
                    ];
                    return [4 /*yield*/, inquirer.prompt(question)];
                case 1:
                    answers = _a.sent();
                    return [2 /*return*/, answers];
            }
        });
    });
}
exports.templateFilesOverwriteConfirm = templateFilesOverwriteConfirm;
/** The existence of interface dependency is confirmed to be deleted */
function templateFilesRelyConfirm() {
    return __awaiter(this, void 0, void 0, function () {
        var question, answers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    question = [
                        {
                            name: 'confirmed',
                            type: 'confirm',
                            message: chalk_1["default"].green('Do you confirm to synchronize the interface? (There will be a risk that the interface called on the page does not exist)?'),
                            "default": false
                        },
                    ];
                    return [4 /*yield*/, inquirer.prompt(question)];
                case 1:
                    answers = _a.sent();
                    return [2 /*return*/, answers];
            }
        });
    });
}
exports.templateFilesRelyConfirm = templateFilesRelyConfirm;
/** Get the current package name */
function getPackageName() {
    return packageJson.name;
}
exports.getPackageName = getPackageName;
function getPackageRegistry() {
    return packageJson.publishConfig.registry;
}
exports.getPackageRegistry = getPackageRegistry;
/** Get the latest version */
function latestVersion(packageName, isBeta) {
    return __awaiter(this, void 0, void 0, function () {
        var response, versionsList, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios_1["default"].get("".concat(getPackageRegistry(), "/").concat(packageName), {
                        timeout: 1000 * 10
                    })];
                case 1:
                    response = _a.sent();
                    versionsList = Object.keys(response.data.versions);
                    for (i = versionsList.length - 1; i >= 0; i--) {
                        if (isBeta) {
                            return [2 /*return*/, versionsList[i]];
                        }
                        if (versionsList[i].indexOf('beta') === -1) {
                            return [2 /*return*/, versionsList[i]];
                        }
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.latestVersion = latestVersion;
function sendStatus() {
    return __awaiter(this, void 0, void 0, function () {
        var stdout, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    console.log('\nstart to send status data...');
                    return [4 /*yield*/, exec('git config --get remote.origin.url')];
                case 1:
                    stdout = (_b.sent()).stdout;
                    stdout.on('data', function (remoteUrl) {
                        return __awaiter(this, void 0, void 0, function () {
                            var idx, projectName, data, description, list, tpl;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        idx = remoteUrl.indexOf('shopee');
                                        projectName = (idx > -1
                                            ? remoteUrl.replace('.git', '').substring(idx + 7)
                                            : remoteUrl).trim();
                                        return [4 /*yield*/, axios_1["default"].get(issueUrl, {
                                                headers: {
                                                    'PRIVATE-TOKEN': token
                                                }
                                            })];
                                    case 1:
                                        data = (_a.sent()).data;
                                        if (data && data.description) {
                                            description = data.description;
                                            list = description.match(/(?<=<td class=\"repo\">).*?(?=<\/td\>)/gi);
                                            if (list && !list.includes(projectName)) {
                                                list.push(projectName);
                                                tpl = "<h2>Status</h2><table><tr><th>Project Counts</th></tr><tr><td>".concat(list.length, "</td></tr></table><h2>List</h2><table><tr><th>Project</th><th>Link</th></tr>").concat(list
                                                    .map(function (name) {
                                                    return "<tr><td class=\"repo\">".concat(name, "</td><td>https://git.garena.com/shopee/").concat(name, "</td></tr>");
                                                })
                                                    .join(''), "</table>");
                                                axios_1["default"].put(issueUrl, { description: tpl }, {
                                                    headers: {
                                                        'PRIVATE-TOKEN': token
                                                    }
                                                });
                                                console.log('\nsend status data success');
                                            }
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        });
                    });
                    return [3 /*break*/, 3];
                case 2:
                    _a = _b.sent();
                    console.log('\nsend status data error');
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.sendStatus = sendStatus;
