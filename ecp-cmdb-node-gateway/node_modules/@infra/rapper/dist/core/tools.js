"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.creatInterfaceHelpStr = exports.creatHeadHelpStr = exports.uniqueItfs = exports.getIntfWithModelName = exports.rap2name = exports.getInterfaces = void 0;
var chalk_1 = require("chalk");
var axios_1 = require("axios");
var _ = require("lodash");
function updateURLParameter(url, param, paramVal) {
    var newAdditionalURL = '';
    var tempArray = url.split('?');
    var baseURL = tempArray[0];
    var additionalURL = tempArray[1];
    var temp = '';
    if (additionalURL) {
        tempArray = additionalURL.split('&');
        for (var i = 0; i < tempArray.length; i++) {
            if (tempArray[i].split('=')[0] != param) {
                newAdditionalURL += temp + tempArray[i];
                temp = '&';
            }
        }
    }
    var rowsTxt = temp + '' + param + '=' + paramVal;
    return baseURL + '?' + newAdditionalURL + rowsTxt;
}
/** Query all interface data from rap */
function getInterfaces(rapApiUrl) {
    return __awaiter(this, void 0, void 0, function () {
        var response, data, modules, collaborators, interfaces, collaboratorsInterfaces;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios_1["default"].get(rapApiUrl, { timeout: 1000 * 20 })];
                case 1:
                    response = _a.sent();
                    data = response.data.data;
                    modules = data.modules;
                    collaborators = data.collaborators;
                    interfaces = _(modules)
                        .map(function (m) { return m.interfaces; })
                        .flatten()
                        .value();
                    if (!collaborators.length) return [3 /*break*/, 3];
                    return [4 /*yield*/, Promise.all(collaborators.map(function (e) {
                            return getInterfaces(updateURLParameter(updateURLParameter(rapApiUrl, 'id', e.id.toString()), 'token', e.token || ''));
                        }))];
                case 2:
                    collaboratorsInterfaces = _a.sent();
                    // The collaborative warehouse has duplicate interfaces, which will be covered by the main warehouse
                    interfaces = _.unionBy(interfaces, _.flatten(collaboratorsInterfaces), function (item) {
                        // If there is a unique identification definition in the description, it will be used first
                        var matches = item.description.match(/\${union:\s?(.*)}/);
                        if (matches) {
                            var __ = matches[0], unionID = matches[1];
                            return unionID;
                        }
                        // Use method-url as the key
                        return "".concat(item.method, "-").concat(item.url);
                    });
                    _a.label = 3;
                case 3:
                    // Remove spaces in the field
                    interfaces = interfaces.map(function (item) { return (__assign(__assign({}, item), { name: item.name.trim() })); });
                    return [2 /*return*/, interfaces];
            }
        });
    });
}
exports.getInterfaces = getInterfaces;
/**
 * Convert rap interface name
 */
function rap2name(rapUrl, itf, urlMapper) {
    if (urlMapper === void 0) { urlMapper = function (t) { return t; }; }
    var method = itf.method, url = itf.url, repositoryId = itf.repositoryId, id = itf.id, moduleId = itf.moduleId;
    var apiUrl = urlMapper(url);
    var regExp = /^(?:https?:\/\/[^\/]+)?(\/?.+?\/?)(?:\.[^./]+)?$/;
    var regExpExec = regExp.exec(apiUrl);
    if (!regExpExec) {
        console.log(chalk_1["default"].red("\u2718 Your rap interface url setting format is incorrect, interface url: ".concat(rapUrl, "/repository/editor?id=").concat(repositoryId, "&mod=").concat(moduleId, "&itf=").concat(id)));
        return;
    }
    var urlSplit = apiUrl.trim().split('/');
    //Only remove the first empty value, and the last one is empty to keep
    //It may be that the interfaces /api/login and /api/login/ need to exist at the same time
    if (urlSplit[0].trim() === '') {
        urlSplit.shift();
    }
    urlSplit.unshift(method.toLocaleUpperCase());
    return urlSplit.join('/');
}
exports.rap2name = rap2name;
/** Add modelName to the interface */
function getIntfWithModelName(rapUrl, intfs, urlMapper) {
    if (urlMapper === void 0) { urlMapper = function (t) { return t; }; }
    return intfs.map(function (itf) { return (__assign(__assign({}, itf), { modelName: rap2name(rapUrl, itf, urlMapper) })); });
}
exports.getIntfWithModelName = getIntfWithModelName;
/** Interface deduplication */
function uniqueItfs(itfs) {
    var itfMap = new Map();
    itfs.forEach(function (itf) {
        var name = itf.modelName;
        if (itfMap.has(name)) {
            itfMap.get(name).push(itf);
        }
        else {
            itfMap.set(name, [itf]);
        }
    });
    var newItfs = [];
    var duplicateItfs = [];
    itfMap.forEach(function (dupItfs) {
        // After the change is in front
        dupItfs.sort(function (a, b) { return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime(); });
        newItfs.push(dupItfs[0]);
        if (dupItfs.length > 1) {
            duplicateItfs.push(dupItfs[0].modelName);
        }
    });
    if (duplicateItfs.length) {
        console.log(chalk_1["default"].yellow('    Duplicate interfaces are found, and the latest modification time is adoptedï¼š'));
        duplicateItfs.forEach(function (item) { return console.log(chalk_1["default"].yellow("        ".concat(item))); });
    }
    return newItfs;
}
exports.uniqueItfs = uniqueItfs;
/** Generate prompt copy */
function creatHeadHelpStr(rapUrl, projectId, rapperVersion) {
    return "\n  /* Rap repository id: ".concat(projectId, " */\n  /* Rapper version: ").concat(rapperVersion, " */\n  /* eslint-disable */\n  /* tslint:disable */\n  // @ts-nocheck\n  \n  /**\n   * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify\n   * Rap repository url: ").concat(rapUrl, "/repository/editor?id=").concat(projectId, "\n   */\n  ");
}
exports.creatHeadHelpStr = creatHeadHelpStr;
/**
 * Generate interface prompt copy
 * @param rapUrl Rap url
 * @param itf Interface information
 * @param extra extra information
 */
function creatInterfaceHelpStr(rapUrl, itf, extra) {
    var name = itf.name, repositoryId = itf.repositoryId, moduleId = itf.moduleId, id = itf.id;
    if (extra) {
        return "\n    /**\n     * Interface name\uFF1A".concat(name, "\n     * Rap url: ").concat(rapUrl, "/repository/editor?id=").concat(repositoryId, "&mod=").concat(moduleId, "&itf=").concat(id, "\n     ").concat(extra, "\n     */");
    }
    return "\n    /**\n     * Interface name\uFF1A".concat(name, "\n     * Rap url: ").concat(rapUrl, "/repository/editor?id=").concat(repositoryId, "&mod=").concat(moduleId, "&itf=").concat(id, "\n     */");
}
exports.creatInterfaceHelpStr = creatInterfaceHelpStr;
