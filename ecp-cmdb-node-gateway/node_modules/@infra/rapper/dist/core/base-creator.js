"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.createBaseIndexCode = exports.createBaseRequestStr = exports.createExtraInfo = exports.createResponseTypes = exports.createModel = void 0;
var chalk_1 = require("chalk");
var convert_1 = require("./convert");
var tools_1 = require("./tools");
var utils_1 = require("../utils");
var packageName = (0, utils_1.getPackageName)();
/** Generate Models file */
function createModel(interfaces, extr) {
    return __awaiter(this, void 0, void 0, function () {
        var itfStrs;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all(interfaces.map(function (itf) { return __awaiter(_this, void 0, void 0, function () {
                        var _scene, _a, reqItf, resItf, error_1;
                        var _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    _c.trys.push([0, 2, , 3]);
                                    _scene = {
                                        parentId: -1,
                                        pos: 2,
                                        name: '__scene',
                                        id: 10000,
                                        type: 'String',
                                        scope: 'request',
                                        required: false,
                                        description: 'scene key',
                                        value: '',
                                        creatorId: itf.creatorId,
                                        repositoryId: itf.repositoryId,
                                        createdAt: itf.createdAt,
                                        updatedAt: itf.updatedAt,
                                        interfaceId: itf.id,
                                        priority: itf.priority,
                                        moduleId: itf.moduleId
                                    };
                                    (_b = itf.properties) === null || _b === void 0 ? void 0 : _b.push(_scene);
                                    return [4 /*yield*/, (0, convert_1["default"])(itf)];
                                case 1:
                                    _a = _c.sent(), reqItf = _a[0], resItf = _a[1];
                                    return [2 /*return*/, "\n            ".concat((0, tools_1.creatInterfaceHelpStr)(extr.rapUrl, itf), "\n            '").concat(itf.modelName, "': {\n              Req: ").concat(reqItf.replace(/export (type|interface) Req =?/, '').replace(/;/g, ''), ";\n              Res: ").concat(resItf.replace(/export (type|interface) Res =?/, '').replace(/;/g, ''), ";\n            }\n          ")];
                                case 2:
                                    error_1 = _c.sent();
                                    throw chalk_1["default"].red("interface\uFF1A".concat(extr.rapUrl, "/repository/editor?id=").concat(itf.repositoryId, "&mod=").concat(itf.moduleId, "&itf=").concat(itf.id, "\n          generate error\n          ").concat(error_1));
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); }))];
                case 1:
                    itfStrs = _a.sent();
                    return [2 /*return*/, "\n        export interface IModels {\n            ".concat(itfStrs.join('\n\n'), "\n        };\n    ")];
            }
        });
    });
}
exports.createModel = createModel;
/** generate IResponseTypes */
function createResponseTypes(interfaces) {
    return "\n    export interface IResponseTypes {\n      ".concat(interfaces.map(function (_a) {
        var modelName = _a.modelName;
        return "\n        '".concat(modelName, "': ResSelector<IModels['").concat(modelName, "']['Res']>\n      ");
    }), "\n    }\n  ");
}
exports.createResponseTypes = createResponseTypes;
//filter the pos that has headers and query in not GET method interface
function createExtraInfo(interfaces) {
    var filters = [];
    interfaces.map(function (itf) {
        var pos = {};
        var method = itf.method, properties = itf.properties, modelName = itf.modelName;
        var props = properties.filter(function (p) { return p.parentId === -1 && p.scope === 'request' && p.name !== '__scene'; });
        var flag = false;
        props.map(function (p) {
            if (p.pos === 1 || (p.pos === 2 && method.toLocaleLowerCase() !== 'get')) {
                flag = true;
                pos[p.name] = p.pos;
            }
        });
        if (flag)
            filters.push({ modelName: modelName, pos: pos });
    });
    return "\n    export const IReqType = {\n      ".concat(filters.map(function (_a) {
        var modelName = _a.modelName, pos = _a.pos;
        return "\n        '".concat(modelName, "': ").concat(JSON.stringify(pos), "\n      ");
    }), "\n    }\n  ");
}
exports.createExtraInfo = createExtraInfo;
function createBaseRequestStr(interfaces, extr) {
    return __awaiter(this, void 0, void 0, function () {
        var rapUrl, resSelector, modelStr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    rapUrl = extr.rapUrl, resSelector = extr.resSelector;
                    return [4 /*yield*/, createModel(interfaces, extr)];
                case 1:
                    modelStr = _a.sent();
                    return [2 /*return*/, "\n    import * as commonLib from '".concat(packageName, "/runtime/commonLib'\n    import { IReqType } from './extra'\n\n    ").concat(modelStr, "\n\n    ").concat(resSelector, "\n\n    ").concat(createResponseTypes(interfaces), "\n\n    type RequestMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'OPTIONS' | 'PATCH' | 'HEAD'\n\n    export function createFetch(fetchConfig: commonLib.RequesterOption, extraConfig?: { fetchType?: commonLib.FetchType }) {\n      if (!extraConfig || !extraConfig.fetchType) {\n        console.warn('Rapper Warning: createFetch API will be deprecated, if you want to customize fetch, please use overrideFetch instead, since new API guarantees better type consistency during frontend lifespan. See detail https://www.yuque.com/rap/rapper/overridefetch')\n      }\n      const rapperFetch = commonLib.getRapperRequest(fetchConfig)\n\n      function fetchMethod<T extends keyof IModels>(name: T) {\n        type Method = T extends `${infer U}/${string}` ? U : never\n        type URL = T extends `${RequestMethod}${infer U}` ? U : never\n        const idx = name.indexOf('/')\n        const method: Method = name.substring(0, idx)\n        const url: URL = name.substring(idx)\n\n        return ((req?: IModels[T]['Req'], extra?: commonLib.IExtra) => {\n          extra = extra || {}\n          extra.reqType = {...(extra.reqType || {}), ...IReqType[name]}\n          return rapperFetch({\n            url,\n            method,\n            params: req,\n            extra,\n          }) as Promise<IResponseTypes[T]>\n        })\n      }\n\n      return {\n        ").concat(interfaces
                            .map(function (itf) {
                            var modelName = itf.modelName;
                            var extra = "* @param req request parameters\n            * @param extra request config parameters";
                            return "\n            ".concat((0, tools_1.creatInterfaceHelpStr)(rapUrl, itf, extra), "\n            '").concat(modelName, "': fetchMethod('").concat(modelName, "')");
                        })
                            .join(',\n\n'), "\n      };\n    }\n    ")];
            }
        });
    });
}
exports.createBaseRequestStr = createBaseRequestStr;
function createBaseIndexCode() {
    return {
        "import": "\n      import { createFetch, IModels } from './request'\n      import * as commonLib from '".concat(packageName, "/runtime/commonLib'\n    "),
        body: "\n      const { defaultFetch } = commonLib\n      let fetch = createFetch({}, { fetchType: commonLib.FetchType.BASE })\n    ",
        "export": "\n      export const overrideFetch = (fetchConfig: commonLib.RequesterOption) => {\n        fetch = createFetch(fetchConfig, { fetchType: commonLib.FetchType.AUTO })\n      }\n      export { fetch, createFetch, defaultFetch }\n      export type Models = IModels\n    "
    };
}
exports.createBaseIndexCode = createBaseIndexCode;
