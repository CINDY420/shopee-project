declare type IJSON = string | number | boolean | null | {
    [property: string]: IJSON;
} | IJSON[];
export declare enum ReqPosType {
    header = 1,
    query = 2,
    body = 3
}
/** Type of additional parameters requested */
export interface IExtra {
    /**
     * The type of request, which is not passed by default. Represents a redux request. Action will be sent and stored in the redux store.
     * normal represents a normal request, no action is sent or stored in the redux store
     * redux represents the redux request, will send the Action, and also store it in the redux store
     */
    type?: 'normal' | 'redux';
    /**
     * request header content-type，default is 'application/json'
     */
    contentType?: 'application/json' | 'multipart/form-data' | 'application/x-www-form-urlencoded' | 'text/plain' | 'text/html' | 'application/javascript';
    /**
     * The query parameter spliced after the request url, for example, POST request requires splicing token parameter
     */
    query?: {
        [key: string]: any;
    };
    /**
     * The user-defined queryString function is processed by JSON.stringify by default, for example {a: 1, b: 2} the result is a=1&b=2
     */
    queryStringFn?: (input: any[] | object) => string;
    /**
     * The request position type
     */
    reqType?: ReqPosType;
    /**
     * The special headers
     */
    headers?: {
        [key: string]: string;
    };
    /** expanded key */
    [key: string]: any;
}
/** defaultFetch parameters */
export interface IDefaultFetchParams {
    url: string;
    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'OPTIONS' | 'PATCH' | 'HEAD';
    params?: any;
    extra?: IExtra;
    fetchOption?: Omit<RequestInit, 'body' | 'method'>;
}
/** defaultFetch parameters */
export interface IUserFetchParams {
    url: string;
    method: IDefaultFetchParams['method'];
    params?: IJSON;
    extra?: IExtra;
}
declare type TQueryFunc = () => {
    [key: string]: IJSON;
};
interface IDefaultConfigObj {
    /** 'prefix'，uniformly set the url prefix, the default is '' */
    prefix?: string;
    /** fetch's second parameter，except body and method can be defined */
    fetchOption?: IDefaultFetchParams['fetchOption'];
    /** Global query parameters, object can be configured, or custom function */
    query?: {
        [key: string]: IJSON;
    } | TQueryFunc;
}
declare type FetchConfigObj = Partial<IDefaultConfigObj>;
export declare type FetchConfigFunc = <T>(params: IUserFetchParams) => Promise<T>;
export declare type RequesterOption = FetchConfigObj | FetchConfigFunc;
export declare const defaultFetch: ({ url, method, params, extra, fetchOption, }: IDefaultFetchParams) => Promise<any>;
export declare const getRapperRequest: (fetchConfig: RequesterOption) => (fetchParams: IUserFetchParams) => Promise<any>;
/** fetch type */
export declare enum FetchType {
    /** base type */
    BASE = 1,
    /** custom coverage type */
    AUTO = 2
}
export {};
