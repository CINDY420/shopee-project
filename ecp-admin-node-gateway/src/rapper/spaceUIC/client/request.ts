/* md5: 37e9e0a1a785ad372936d30f3a0d0c17 */
/* Rap repository id: 234 */
/* Rapper version: 2.1.14 */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

/**
 * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify
 * Rap repository url: https://rap.shopee.io/repository/editor?id=234
 */

import * as commonLib from '@infra/rapper/runtime/commonLib'
import {IReqType} from './extra'

export interface IModels {
  /**
   * Interface name：validate UIC token
   * Rap url: https://rap.shopee.io/repository/editor?id=234&mod=1196&itf=7347
   */
  'POST/apis/uic/v2/auth/token_validate': {
    Req: {
      /**
       * scene key
       */
      __scene?: string
    }
    Res: {
      user: {
        name: string
        given_name: string
        locale: string
        email: string
        full_name: string
        description: string
        family_name: string
        update_time: string
        is_bot: boolean
        username: string
        picture: string
        limited: boolean
        sub: string
        create_time: string
      }
      token: string
      time: number
      expireAt: number
    }
  }
}

type ResSelector<T> = T

export interface IResponseTypes {
  'POST/apis/uic/v2/auth/token_validate': ResSelector<IModels['POST/apis/uic/v2/auth/token_validate']['Res']>
}

type RequestMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'OPTIONS' | 'PATCH' | 'HEAD'

export function createFetch(fetchConfig: commonLib.RequesterOption, extraConfig?: {fetchType?: commonLib.FetchType}) {
  if (!extraConfig || !extraConfig.fetchType) {
    console.warn(
      'Rapper Warning: createFetch API will be deprecated, if you want to customize fetch, please use overrideFetch instead, since new API guarantees better type consistency during frontend lifespan. See detail https://www.yuque.com/rap/rapper/overridefetch'
    )
  }
  const rapperFetch = commonLib.getRapperRequest(fetchConfig)

  function fetchMethod<T extends keyof IModels>(name: T) {
    type Method = T extends `${infer U}/${string}` ? U : never
    type URL = T extends `${RequestMethod}${infer U}` ? U : never
    const idx = name.indexOf('/')
    const method: Method = name.substring(0, idx)
    const url: URL = name.substring(idx)

    return (req?: IModels[T]['Req'], extra?: commonLib.IExtra) => {
      extra = extra || {}
      extra.reqType = {...(extra.reqType || {}), ...IReqType[name]}
      return rapperFetch({
        url,
        method,
        params: req,
        extra,
      }) as Promise<IResponseTypes[T]>
    }
  }

  return {
    /**
     * Interface name：validate UIC token
     * Rap url: https://rap.shopee.io/repository/editor?id=234&mod=1196&itf=7347
     * @param req request parameters
     * @param extra request config parameters
     */
    'POST/apis/uic/v2/auth/token_validate': fetchMethod('POST/apis/uic/v2/auth/token_validate'),
  }
}
