/* md5: e4473820c1ab76cd6352a58d20ce830b */
/* Rap repository id: 211 */
/* Rapper version: 2.1.13 */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

/**
 * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify
 * Rap repository url: https://rap.shopee.io/repository/editor?id=211
 */

import {createFetch, IModels} from './request'
import * as commonLib from '@infra/rapper/runtime/commonLib'

import {useRequest} from 'ahooks'
import {Options, Result} from 'ahooks/lib/useRequest/src/types'

const {defaultFetch} = commonLib
let fetch = createFetch({}, {fetchType: commonLib.FetchType.BASE})

export const overrideFetch = (fetchConfig: commonLib.RequesterOption) => {
  fetch = createFetch(fetchConfig, {fetchType: commonLib.FetchType.AUTO})
}
export {fetch, createFetch, defaultFetch}
export type Models = IModels

type IModelUrls = keyof IModels
export interface IExtra {
  /**
   * request header content-typeï¼Œdefault is 'application/json'
   */
  contentType?:
    | 'application/json'
    | 'multipart/form-data'
    | 'application/x-www-form-urlencoded'
    | 'text/plain'
    | 'text/html'
    | 'application/javascript'
  /**
   * The query parameter spliced after the request url, for example, POST request requires splicing token parameter
   */
  query?: {[key: string]: any}
  /**
   * The user-defined queryString function is processed by JSON.stringify by default, for example {a: 1, b: 2} the result is a=1&b=2
   */
  queryStringFn?: (input: any[] | object) => string
  /**
   * The request position type
   */
  reqType?: ReqPosType
  /**
   * The special headers
   */
  headers?: {[key: string]: string}
}
/** use aHooks's useRequest to handle response data */
function useFetch<I extends IModelUrls>(
  url: I,
  req?: null | IModels[I]['Req'],
  options?: Options<IModels[I]['Res'], IModels[I]['Req']>,
  extra?: IExtra
): Result<IModels[I]['Res'], [IModels[I]['Req']?, IExtra?]> {
  async function service(params, extraConfig) {
    const res = await fetch[url](params, extraConfig || extra)
    return res
  }
  if (req) {
    options ? (options.defaultParams = req) : (options = {defaultParams: req})
  }
  return useRequest<IModels[I]['Res'], [IModels[I]['Req']?, IExtra?]>(service, options)
}
export {useRequest, useFetch}
